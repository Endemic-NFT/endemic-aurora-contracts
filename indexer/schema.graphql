type _Schema_
  @fulltext(
    name: "activitySearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Activity"
        fields: [
          { name: "transferFrom" }
          { name: "transferTo" }
          { name: "auctionSeller" }
          { name: "type" }
        ]
      }
    ]
  )
  @fulltext(
    name: "nftSearch"
    language: en
    algorithm: proximityRank
    include: [{ entity: "NFT", fields: [{ name: "name" }, { name: "id" }] }]
  )

type NFTContract @entity {
  id: ID!
  name: String!
  symbol: String!
  category: String!
  createdAt: BigInt!
  nfts: [NFT!]! @derivedFrom(field: "contract")
}

type NFTOwner @entity {
  id: ID!
  account: Account!
  supply: BigInt!
  nft: NFT!
}

type NFT @entity {
  id: ID!
  contract: NFTContract!
  tokenId: BigInt!
  category: String
  artist: Account
  owners: [NFTOwner!] @derivedFrom(field: "nft")
  updatedAt: BigInt!
  createdAt: BigInt!
  auctions: [Auction!] @derivedFrom(field: "nft")
  burned: Boolean!

  #erc-1155
  supply: BigInt

  seller: Bytes
  isOnAuction: Boolean!
  currentPrice: BigInt!

  #metadata
  tokenURI: String
  name: String
  description: String
  image: String

  #denormalized for performance
  contractId: Bytes!
  contractName: String
  artistId: Bytes
  ownerId: Bytes!
}

type Account @entity {
  id: ID!
  address: Bytes!
  ownedNfts: [NFTOwner!] @derivedFrom(field: "account")
  createdNfts: [NFT!] @derivedFrom(field: "artist")
}

type Auction @entity {
  id: ID!
  seller: Bytes!
  buyer: Bytes!
  startingPrice: BigInt!
  endingPrice: BigInt!
  duration: BigInt!
  startedAt: BigInt!
  nft: NFT!
  status: AuctionStatus!
  canceledAt: BigInt
  soldAt: BigInt
  totalPrice: BigInt
}

type Activity @entity {
  id: ID!
  type: String!
  createdAt: BigInt!

  #transfer activity
  transferFrom: String
  transferTo: String

  #auction activity
  auction: Auction
  auctionSeller: String
  auctionBuyer: String
  auctionPrice: BigInt

  #denormalized
  nft: NFT
  nftTokenURI: String
  nftImage: String
  nftName: String

  transactionHash: Bytes!
}

type Counts @entity {
  id: ID!
  nftsCount: BigInt!
  nftContractsCount: Int!
  nftAuctionsCount: Int!
}

type ContractsCounts @entity {
  id: ID!
  totalCount: Int!
  onSaleCount: Int!
}

enum AuctionStatus @entity {
  open
  sold
  canceled
}

enum ActivityType @entity {
  mint
  burn
  transfer
  auctionCreate
  auctionSuccess
  auctionCancel
}
